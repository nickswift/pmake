#!/usr/bin/perl
# Partner: Nicholas Wood (njwood@ucsc.edu)
# Partner: William Cork  (wcork@ucsc.edu)
use strict;
use warnings;

# imports
use Getopt::Std;
use Cwd;

# use getopts in the canonical fashion
my %opts;
getopts('dnf:', \%opts);

my $debug_mode = (exists $opts{'d'}) ? 1          : 0;
my $nex_mode   = (exists $opts{'n'}) ? 1          : 0;
my $makefile   = (exists $opts{'f'}) ? $opts{'f'} : 'Makefile';

# regular expressions used by pmake
my $regex_term = 
  qr/[\w\d\.\$\{\}^\t]*/;

my $regex_content = 
  qr/[\w\d\.\%\$\{\}\<\>\-_=,+;:?\/ ]+/;

my $regex_macro = 
  qr/(${regex_term}) *= *(${regex_content})/;

my $regex_macro_ident = 
  qr/\$\{(${regex_term})\}/;

my $regex_target_header = 
  qr/\n(${regex_term}) *\: *((${regex_term} *)*)/;

my $regex_target_body = 
  qr/((\n\t${regex_content}*)*)/;

my $regex_target = 
  qr/${regex_target_header}${regex_target_body}/;

my $regex_pattern_target = 
  qr/\n((%\.(.+)) *\: *(%\.(.+)))((\n\t(.*))*)/;

# ----------------------------------------------------------------------
# SUBROUTINES: HELPER FUNCTIONS
# ----------------------------------------------------------------------
sub debug_print ($)
{
  if ($debug_mode) {
    my $msg = shift;
    print("$msg\n");
  }
}

# run_system_command: Runs passed command and handles the minus make 
# operator
sub run_system_command ($)
{
  my ($input, $command, $term_signal, $ignore_status, $core_dumped, 
    $exit_status);

  $input         = shift;
  $command       = undef;
  $ignore_status = 0;

  debug_print("Running command: $input");
  if ($input =~ m/^-/) {
    $command = $input;
    $command =~ s/^(-| )+//;
    debug_print("Command $command Error will be ignored");
    $ignore_status = 1;
  } else {
    $command = $input;
    debug_print("Command $command Error will not be ignored");
  }
  my @args = split(m/ /, $command);
  my $redir_file;

  # process for possible redirection
  my @rargs = ();
  while (@args) {
    my $val = shift(@args);

    if ($val =~ m/>([^>]+)/) {
      # open file with STDOUT
      open($redir_file, '>', $1) or die("Could not open file: $!");
      last;
    } else {
      push(@rargs, $val);
    }
  }

  my $output = system(@rargs); #or exit ($?);
  my $return_status = $?;
  $term_signal = $? & 0x7F;
  $core_dumped = $? & 0x80;
  $exit_status = ($? >> 8) & 0xFF;

  if ($return_status != 0) {
    debug_print("Return status: $return_status");
    debug_print("Term Signal: $term_signal");
    debug_print("Core Dumped: $core_dumped");
    debug_print("Exit Status: $exit_status");
  }
  if($exit_status != 0) {
    if($ignore_status == 1) {
        debug_print("Return status ignored");
    } else {
        debug_print("BAD Command");
        exit ($exit_status);
    }
  }

  # do redirection if it's needed
  if (defined($redir_file)) {
    print $redir_file $output;

    close($redir_file);
  }
}

# ----------------------------------------------------------------------
# SUBROUTINES: MACROS 
# ----------------------------------------------------------------------
my %macros;
my %targets;
my $first_target;
my %pattern_targets;

# Find a macro key inside the macro hash -- die if it's not found
# $ --> the name to look up
sub find_macro ($)
{
  my $key = shift;
  my $val = $macros{$key} or die("ERR: MACRO $key NOT FOUND");
  return $val;
}

# Evaluates a macro value
sub eval_macros ($)
{
  # the following line-noise interprets a macro's ${} values by looking 
  # them up in the relevant hash and replacing instances of that 
  # sequence in the original value string
  my $raw_val = shift;
  my $val     = $raw_val;

  while($raw_val =~  m/(\${[^}]+})/g) {
    my ($tmp_macro, $repl);

    # extract key and find it in the macro hash
    $tmp_macro =  $1;
    $tmp_macro =~ m/([^\${}]+)/;
    $repl      =  find_macro($1);

    # escape the "$" before doing the regex replace
    $tmp_macro =~ s/\$/\\\$/g;
    $val       =~ s/$tmp_macro/$repl/e;
  }
  return $val;
}

sub add_macro ($$$)
{
  my $line = shift;
  my $key  = shift;
  my $val  = shift;

  # detect an eval_macros
  if ($line =~ m/\:/) {
    $val = eval_macros($val);
  }

  $macros{$key} = $val;
}

sub eval_target_macros ($$)
{
  my ($tindex, $raw_val, $val, $tmp_macro, $repl);
  $tindex  = shift;
  $raw_val = shift;
  $val     = $raw_val;

  # dereference target
  my %target = %{$targets{$tindex}};

  # evaluate local macros
  while ($raw_val =~ m/(\$@|\$\^|\$<)/g) {
    # get correct macro replacement value
    $tmp_macro = $1;

    if ($tmp_macro eq "\$@") { 
      $repl = $tindex;
    } elsif ($tmp_macro eq "\$^") { 
      $repl = join(' ', @{$target{'deps'}});
    } elsif ($tmp_macro eq "\$<") {

      debug_print("FIRSTDEP IS: ".$target{'firstdep'});
      $repl = $target{'firstdep'};
    } else { 
      die('this shouldn\'t be reachable');
    }

    # do replacement
    $tmp_macro =~ s/\$/\\\$/g;
    $val       =~ s/$tmp_macro/$repl/e;
  }

  # debug_print("$val");
  return $val;
}

# input can either be the right side of a macro, or the full command
# from inside a target
sub eval_command ($$)
{
  my ($tindex, $raw_cmd);
  $tindex  = shift;
  $raw_cmd = shift;

  # find the target we're looking at
  my %target  = %{$targets{$tindex}};
  $raw_cmd = eval_target_macros($tindex, $raw_cmd);

  # Get values of global macros first
  return eval_macros($raw_cmd);
}

# ----------------------------------------------------------------------
# SUBROUTINES: TARGETS 
# ----------------------------------------------------------------------
sub macro_list_iter ($);

sub macro_list_iter ($)
{
  my ($remaining) = @_;

  if ($remaining =~ m/(${regex_term}) +(${regex_term})/) {
    debug_print("EXTRACTING: $& --> $1 : $2");
    return eval_macros($1) . ' ' . macro_list_iter($2);
  } 
  return eval_macros($remaining);
}

sub add_target_general ($$$$)
{
  # unset target flags
  my $thash    = shift;
  my $output   = shift;
  my $deps     = shift;
  my $commands = shift;

  debug_print("COMMANDS: $commands");

  # evaluate macros in the target's name
  $output = eval_macros($output);

  # evaluate macros in the target's dependency list
  $deps = macro_list_iter(eval_macros($deps));

  # pull dependency list apart by space
  my @deps = split(m/ /, $deps);
  my @cmds = ();

  debug_print("DEPENDENCIES -- @deps");

  # split cmds line by newline
  while ($commands =~ m/\n(.*)/g) {
    next if ($1 eq "");
    debug_print("--> SPLIT CMD: $1");
    push(@cmds, $1);
  }

  debug_print("HAS COMMANDS:\n");
  map { debug_print("\"$_\"\n"); } @cmds;

  # define the target as another hash
  my %target;

  # check whether the target exists already
  if (exists($thash->{$output})) {
    %target = %{$thash->{$output}};
    debug_print("TARGET ALREADY EXISTS");

    # Append dependencies to this target's extant dependency list
    map {
      debug_print("ADDING DEP: $_");
      my $tmp = $_;
      unshift(@{$target{'deps'}}, $tmp) if !grep { 
        $_ eq $tmp } @{$target{'deps'}};
    } @deps;

    # reset firstdep
    # $target{'firstdep'} = $deps[0];
    $thash->{$output}{'firstdep'} = $deps[0];
    debug_print("FIRSTDEP: " . $target{'firstdep'});

    @{$thash->{$output}{'cmds'}} = ();
    map {
      debug_print("ADDING CMD: $_");
      my $tmp = $_;
      unshift(@{$target{'cmds'}}, $tmp) if !grep { 
        $_ eq $tmp } @{$target{'cmds'}};
    } @cmds;

  } else {

    # check for file
    # TODO: also check timestamp to see if it has been modified since 
    # last build
    $target{'built'}    = (-e $output) ? 1 : 0;
    $target{'deps'}     = \@deps;
    $target{'cmds'}     = \@cmds;
    $target{'firstdep'} = $deps[0];
    $thash->{$output}   = \%target;
  }
  
  $first_target = defined($first_target) ? $first_target : $output;
}


sub add_target ($$$)
{
  my $output = shift;
  my $deps   = shift;
  my $cmds   = shift;

  add_target_general(\%targets, $output, $deps, $cmds);
  debug_print("ADDING TARGET: $output");
}

# being sure to prototype the function so it can recurse
sub build_target_output ($);

# build the output of a target
sub build_target_output ($)
{
  my ($target, $dep, $cmd);
  my %macros_local;
  $target = shift;

  # If there's no target, look for a file, otherwise build the target
  if (!exists($targets{$target})) { 
    debug_print("TARGET \"$target\" DOES NOT EXIST");
    if (-e $target) {
      debug_print("FILE \"$target\" EXISTS");
      return;
    }
  }

  my @deps     = @{$targets{$target}->{'deps'}};
  my @commands = @{$targets{$target}->{'cmds'}};

  debug_print("BUILDING TARGET: $target");
  debug_print("HAS COMMANDS:\n");
  map { debug_print("\"$_\"\n"); } @commands;

  # Step through dependencies and ensure they've been built
  for $dep (@deps) {
    if ($targets{$target}->{'built'} == 0) {
      debug_print("STEPPING INTO DEP: $dep");
      build_target_output($dep);
    }
  }

  # step through the commands in this target
  for $cmd (@commands) {
    # remove tabs
    $cmd =~ s/\t//g;

    # first, evaluate target macros in this line
    debug_print("EVALUATING $cmd");
    $cmd = eval_command($target, $cmd);
    
    # detected local macro
    if ($cmd =~ /${regex_macro}/) {
      # macros in isolated context
    } else {
      # execute
      debug_print("PLAIN COMMAND: $cmd");

      $cmd = eval_macros($cmd);

      debug_print("EVAL COMMAND: $cmd");

      # REMOVE LEADING "- " FROM COMMANDS.
      my $cmd_copy = $cmd;
      $cmd_copy =~ s/^- ?//g;
      print("$cmd_copy\n");
      run_system_command($cmd) if (!$nex_mode);
    }
  }
}

#-----------------------------------------------------------------------
# SUBROUTINES: PATTERN RULES AND PATTERN EXPANSION
#-----------------------------------------------------------------------
 
sub add_pattern_target ($$$)
{
  my $output = shift;
  my $deps   = shift;
  my $cmds   = shift;

  add_target_general(\%pattern_targets, $output, $deps, $cmds);
  debug_print("ADDING PATTERN TARGET: $output");
}

sub generate_pattern_target ($)
{
  my ($keyword);
  $keyword  = shift;

  my $template = $pattern_targets{$keyword};
  my %target;
  my @deps   = ();
  my @cmds   = ();
  my $output = $keyword;
  $output    =~ s/%(\..+)/$keyword\.$2/g;

  for my $dep (@{$template->{'deps'}}) {
    debug_print("PUSHING: $dep");
    $dep =~ m/(%)(\..+)/;
    push(@deps, "$keyword\.$2");
  }

  for my $cmd (@{$template->{'cmds'}}) {
    my $tmp_cmd =  $cmd;
    $tmp_cmd    =~ s/(%)(\..+)/$keyword\.$2/g;
    push(@cmds, $tmp_cmd);
  }

  $target{'built'}    = 0;
  $target{'deps'}     = \@deps;
  $target{'cmds'}     = \@cmds;
  $target{'firstdep'} = $deps[0];
  $targets{$output}   = \%target;
}

# REFACTOR
sub expand_pattern_targets ()
{
  # Look at all files in current working directory
  opendir(DIR, getcwd);

  # fit each file into an array
  my @files = map { "./$_" } readdir(DIR);
  closedir(DIR);

  # iterate through targets
  map {
    # compare targ dependency to each file in file array
    # assuming there's only one dependency in a target pattern
    my $dep  = @{$pattern_targets{$_}->{'deps'}}[0];
    my @cmds = @{$pattern_targets{$_}->{'cmds'}};
    my $targ = $_;

    # extract extension from target and dependency
    $dep =~ m/%(\..+)/;
    my $patt = $1;
    $patt =~ s/\./\\\./g;

    $targ =~ m/%(\..+)/;
    my $tpatt = $1;
    $tpatt =~ s/\./\\\./g;
    
    # build commands list
    my $jcmds;
    foreach (@cmds) { $jcmds .= "\n$_" };

    # filter out non-matching files
    debug_print("PATTERN: $patt --> $targ");
    map {
      $_ =~ /(${regex_term}+)(${patt})/;
      debug_print("MATCHING FILE: $1 --> $2");

      # find "from" and "to" file names
      my $from = "$1$patt";
      my $to   = "$1$tpatt";
      $from =~ s/[\\ ]//g;
      $to   =~ s/[\\ ]//g;
      
      debug_print("FROM: $from TO: $to");
      debug_print("CMDS: $jcmds");

      add_target($to, $from, $jcmds);

    } grep {/${regex_term}+${patt}/} @files;

  } keys %pattern_targets;
}

# helper -- construct real target, add to tree

# ----------------------------------------------------------------------
# SUBROUTINES: MAKEFILE PARSING
# ----------------------------------------------------------------------
sub parse_makefile ($)
{
  # use regexes to extract parts of the makefile
  my $contents = shift;
  # remove comments
  $contents =~ s/.*#.*//g;
  # extract macros
  while ($contents =~ m/\n${regex_macro}/g) {
    add_macro($&, $1, $2);
  }
  # extract targets
  while ($contents =~ m/${regex_target}/g) {
    add_target($1, $2, $4);
    debug_print("TARGET:\n    OUTPUT : $1\n    ");
    debug_print("DEPS   : $2\n    CMDS   : $4\n");
  }
  while ($contents =~ m/${regex_pattern_target}/g) {
    add_pattern_target($2, $4, $6);
    debug_print("PATTERN TARGET:\n    OUTPUT : $2\n    ");
    debug_print("DEPS   : $4\n    CMDS   : $6\n");
  }
}

# read input file
sub read_file ($) 
{
  my ($path) = @_;
  my $ret;
  open FILE, $path or die "Unable to open makefile: $path";

  while (<FILE>) {
    $ret .= $_;
  }
  close FILE;
  return $ret;
}

# ----------------------------------------------------------------------
# MAIN PROGRAM CODE
# ----------------------------------------------------------------------
sub main ()
{
  my ($mf_contents, $entry_point);

  $mf_contents = read_file($makefile);
  parse_makefile($mf_contents);

  debug_print("\n--- EXPANDING PATTERN TARGETS ---\n");
  expand_pattern_targets();

  debug_print("\n--- STARTING BUILD PROCESS ---\n");

  # if there's no argument, default to all and quit
  if ($#ARGV < 0) {
    # look for 'all', if no all default to first target in the hash
    $entry_point = exists($targets{'all'}) ? 'all' : $first_target;
    debug_print("STARTING AT TARGET: $entry_point");
    build_target_output($entry_point);
    return;
  }

  debug_print("STEPPING THROUGH SPECIFIED TARGETS");
  # step through desired build targets
  for my $target (@ARGV) {
    # build 'em
    build_target_output($target);
  }
}

# invoke main subroutine
main();
