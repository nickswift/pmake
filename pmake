#!/usr/bin/perl 
use strict;
use warnings;

# imports
use Getopt::Std;

# use getopts in the canonical fashion
my %opts;
getopts('dnf:', \%opts);

my $debug_mode = (exists $opts{'d'}) ? 1          : 0;
my $nex_mode   = (exists $opts{'n'}) ? 1          : 0;
my $makefile   = (exists $opts{'f'}) ? $opts{'f'} : 'Makefile';

# get the target
my $target = $ARGV[0];
my $mf_contents;
my %targ_root;

# subs_openfile: Reads entire file from first argument and returns it as string.
sub subs_openfile
{
  my $file_location = $_[0];
  if($debug_mode)
  {
    print("Reading in: $file_location ... ");
  }
  local $/=undef;
  open MAKEFILE, $file_location or die("Makefile:$file_location could not be opened\n");
  my $file_contents = <MAKEFILE>;
  if($debug_mode)
  {
    print("DONE\n");
  }
  close MAKEFILE;
  return $file_contents;
}

# TODO: retrieve assignments from makefile 

# TODO: retrieve targets from makefile

# create a target node
sub mf_targ_node 
{

}

# parse a makefile into target scope tree
sub mf_parse 
{

  # regex
  my $macro_regex = "[A-z0-9_\$\{\}]+ *= *[A-z0-9_\$\{\}]+";
  my $evalmacro_regex = "[A-z0-9_\$\{\}]+ *\:= *[A-z0-9_\$\{\}]+";
  my $target_regex = "[A-z0-9_\$\{\}]+ *: *[A-z0-9_\$\{\}]+";

  # read makefile line-by-line
  for my $line (split(/\n/, $_[0])) 
  {
    if ($line =~ /$macro_regex/) {
      if($debug_mode) {
        print("macro: $line\n");
      }
    } elsif ($line =~ /$evalmacro_regex/) {
      if($debug_mode) {
        print("evalmacro: $line\n");
      }
    } elsif ($line =~ /$target_regex/) {
      if($debug_mode) {
        print("target: $line\n");
      }
    } else {
      die("you're a terrible person");
    }
  }
  return %targ_root;
}

# Read selected makefile into a string
$mf_contents = subs_openfile($makefile);
# Parse the contents of the makefile into a tree
%targ_root = mf_parse($mf_contents);




